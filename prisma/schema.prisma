generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_RENDER_URI")
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

model Attendance {
  id               String    @id @default(uuid())
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  fullName         String?
  attendanceDate   DateTime?
  amTimeIn         DateTime?
  amTimeOut        DateTime?
  pmTimeIn         DateTime?
  pmTimeOut        DateTime?
  noOfHoursWorked  Float?
  undertime        Float?  
  travelPass       String?
  isHalfDay        Boolean?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model TimeCard {
  id             String       @id @default(uuid())
  from           DateTime
  to             DateTime
  name           String?
  sheets         Sheet[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Sheet {
  id             String       @id @default(uuid())
  from           DateTime
  to             DateTime
  name           String?
  timeCard       TimeCard     @relation(fields: [timeCardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  timeCardId     String
  userId         String
  attendances    Json[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

// model Card {
//   id             String       @id @default(uuid())
//   name            String
//   attendanceDate  DateTime?
//   amTimeIn        DateTime?
//   amTimeOut       DateTime?
//   pmTimeIn        DateTime?
//   pmTimeOut       DateTime?
//   undertime        Float? 
//   regularDays    Int?
//   saturdays      Int?
//   userId         String?
//   timeCard       TimeCard     @relation(fields: [timeCardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   timeCardId     String
//   createdAt      DateTime     @default(now())
//   updatedAt      DateTime     @updatedAt
// }

model User {
  id         String  @id @default(uuid())
  employeeId String  @unique
  rfId       String? @unique
  fullName   String?
  firstName  String
  middleName String?
  lastName   String
  age        Int
  avatar     String?
  

  payrollGroup    PayrollGroup? @relation(fields: [payrollGroupId], references: [id])
  payrollGroupId  String?

  designation     Designation? @relation(fields: [designationId], references: [id] )
  designationId   String?

  receipts        Receipt[]

  attendances     Attendance[]

  deductions      Deduction[]

  travelPass      Travelpass[]


  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  // houseOwned House[]  @relation("HouseOwner")
  // houseBuild House[]  @relation("HouseBuilder")
}

model Designation {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  users       User[]
  salary      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Receipt {
  id                   String   @id @default(uuid())
  payroll              Payroll @relation(fields: [payrollId], references: [id], onDelete: Cascade,  onUpdate: Cascade)
  payrollId            String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId               String
  name                 String?
  designation          String?
  salary               Float?
  prc                  String?
  noOfDays             Int
  grossAmountEarned    Float
  tax1                 Float?
  tax5                 Float?
  tax10                Float?
  sss                  Float?
  pagibig              Float?
  philhealth           Float?
  netAmountDue         Float
  signatureOfRecipient String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Payroll {
  id             String       @id @default(uuid())
  from           DateTime
  to             DateTime
  payrollGroup   PayrollGroup @relation(fields: [payrollGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  payrollGroupId String
  payrollNumber  String?
  fundCluster    String?
  projectName    String?
  programName    String?
  receipts       Receipt[]       
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model PayrollGroup {
  id          String    @id @default(uuid())
  name        String
  fundCluster String
  programName String?
  users       User[] 
  payrolls    Payroll[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Holiday {
  id               String   @id @default(uuid())
  name             String   @unique
  description      String?
  prerequisiteDate DateTime
  requisiteDate    DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Travelpass {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  typeOf    String
  start     DateTime
  end       DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Deduction {
  id        String   @id @default(uuid())
  name      String   @unique
  users     User[]
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LeaveType {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
