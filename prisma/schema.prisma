generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["fullTextSearch"]
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Attendance {
  id      String   @id @default(uuid())
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  amTimeIn DateTime?
  amTimeOut DateTime?
  pmTimeIn DateTime?
  pmTimeOut DateTime?
  isLate  Boolean?
  lateMinutes Int?
  isUndertime Boolean?
  undertimeMinutes Int?
  isOnTime Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id         String  @id @default(uuid())
  employeeId String  @unique
  fullName   String?
  firstName  String
  middleName String?
  lastName   String
  age        Int
  avatar     String?

  payrollGroup   PayrollGroup? @relation(fields: [payrollGroupId], references: [id])
  payrollGroupId String?

  designation   Designation? @relation(fields: [designationId], references: [id])
  designationId String?

  attendances Attendance[]

  deductions   Deduction[]

  travelPass Travelpass[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // houseOwned House[]  @relation("HouseOwner")
  // houseBuild House[]  @relation("HouseBuilder")
}

model Designation {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  users       User[]
  salary      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // houseOwned House[]  @relation("HouseOwner")
  // houseBuild House[]  @relation("HouseBuilder")
}

model PayrollGroup {
  id          String   @id @default(uuid())
  name        String
  fundCluster String
  programName String?
  users       User[] 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // houseOwned House[]  @relation("HouseOwner")
  // houseBuild House[]  @relation("HouseBuilder")
}

model Holiday {
  id               String   @id @default(uuid())
  name             String   @unique
  description      String?
  prerequisiteDate DateTime
  requisiteDate    DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  // houseOwned House[]  @relation("HouseOwner")
  // houseBuild House[]  @relation("HouseBuilder")
}

model Travelpass {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  typeOf    String
  start     DateTime
  end       DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // houseOwned House[]  @relation("HouseOwner")
  // houseBuild House[]  @relation("HouseBuilder")
}

model Deduction {
  id        String   @id @default(uuid())
  name      String   @unique
  user      User[] 
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // houseOwned House[]  @relation("HouseOwner")
  // houseBuild House[]  @relation("HouseBuilder")  
}

model LeaveType {
  id        String   @id @default(uuid())
  name      String   @unique
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // houseOwned House[]  @relation("HouseOwner")
  // houseBuild House[]  @relation("HouseBuilder")  
}

// model UserDeduction {
//   id            String     @id @default(uuid())
//   user          User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId        String
//   deduction     Deduction? @relation(fields: [deductionId], references: [id], onDelete: Cascade)
//   deductionId   String
//   createdAt     DateTime   @default(now())
//   updatedAt     DateTime   @updatedAt
//   // houseOwned House[]  @relation("HouseOwner")
//   // houseBuild House[]  @relation("HouseBuilder")  
// }

// model House {
//   id           String   @id @default(uuid())
//   address      String   @unique
//   wifiPassword String?
//   ownerId      String
//   owner        User     @relation("HouseOwner", fields: [ownerId], references: [id])
//   builtById    String
//   builtBy      User     @relation("HouseBuilder", fields: [builtById], references: [id])
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
// }

